    def is_chain_valid(self):
        """
        Enhanced chain validation that reloads from disk first to detect real-time changes
        """
        # ADDED: Force reload chain from disk to get current state
        try:
            print("üîç [INTEGRITY] Reloading chain from disk for fresh validation...")
            self.load_chain()
        except Exception as e:
            print(f"‚ùå [INTEGRITY] Failed to reload chain: {str(e)}")
            # Continue with existing chain if reload fails
        
        print("\nüîç [ENHANCED SECURITY SCAN] Analyzing blockchain integrity...")
        print("=" * 70)
        
        infected_blocks = []
        
        # Scan each block for infections
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i-1]
            
            # Check 1: Hash Integrity
            calculated_hash = current_block.calculate_hash()
            if current_block.hash != calculated_hash:
                infection_info = {
                    "block_id": current_block.index,
                    "infection_type": "HASH_MISMATCH", 
                    "stored_hash": current_block.hash,
                    "calculated_hash": calculated_hash,
                    "block_data": current_block.data,
                    "timestamp": current_block.timestamp,
                    "severity": "CRITICAL"
                }
                infected_blocks.append(infection_info)
                print(f"üö® [CRITICAL] INFECTED BLOCK #{current_block.index} - HASH MISMATCH")
                print(f"   ‚îî‚îÄ Stored: {current_block.hash[:16]}...")
                print(f"   ‚îî‚îÄ Calculated: {calculated_hash[:16]}...")
            
            # Check 2: Chain Continuity  
            if current_block.previous_hash != previous_block.hash:
                infection_info = {
                    "block_id": current_block.index,
                    "infection_type": "CHAIN_BREAK",
                    "expected_previous": previous_block.hash, 
                    "actual_previous": current_block.previous_hash,
                    "block_data": current_block.data,
                    "timestamp": current_block.timestamp,
                    "severity": "CRITICAL"
                }
                infected_blocks.append(infection_info)
                print(f"üö® [CRITICAL] INFECTED BLOCK #{current_block.index} - CHAIN BREAK")
                print(f"   ‚îî‚îÄ Expected: {previous_block.hash[:16]}...")
                print(f"   ‚îî‚îÄ Actual: {current_block.previous_hash[:16]}...")
        
        # If no infections found
        if not infected_blocks:
            print("‚úÖ [ALL CLEAR] Blockchain is clean and secure!")
            print("=" * 70)
            return True
        
        # Echo infected block IDs
        infected_ids = [block["block_id"] for block in infected_blocks]
        print(f"\nüö´ [INFECTION DETECTED] Infected Block IDs: {infected_ids}")
        print(f"üìä [SUMMARY] {len(infected_blocks)} infected blocks found")
        
        # Display detailed infection report
        print("\nüìã [INFECTION DETAILS]")
        print("-" * 50)
        for infection in infected_blocks:
            print(f"Block #{infection['block_id']}:")
            print(f"  Type: {infection['infection_type']}")
            print(f"  Severity: {infection['severity']}")
            if 'block_data' in infection:
                action = infection['block_data'].get('action', 'unknown')
                username = infection['block_data'].get('username', 'N/A')
                print(f"  Action: {action} (User: {username})")
            print(f"  Time: {time.strftime('%Y-%m-%d %H:%M:%S', time.localtime(infection['timestamp']))}")
            print("-" * 30)
        
        # Create clean fallback chain (excluding infected blocks)
        self._create_enhanced_fallback_response(infected_blocks)
        
        return False